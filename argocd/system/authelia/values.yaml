users: [ ]
authelia:
  # Root domain under Authelia protection
  # domain: example.com
  # Ingress configurtion
  ingress:
    enabled: true
    # Do not configure TLS here
    # This is handled in the global TLS config
    tls:
      enabled: false

  # Pod configuration
  pod:
    kind: Deployment
    resources:
      limits:
        cpu: "4.00"
        memory: "125Mi"
      requests:
        cpu: "0.25"
        memory: "50Mi"
    extraVolumes:
      - name: var-authelia
        emptyDir:
          medium: Memory
      - name: authelia-users
        configMap:
          name: authelia-users
          items:
            - key: users.yaml
              path: users.yaml
    extraVolumeMounts:
      - name: var-authelia
        mountPath: /var/authelia
      - name: authelia-users
        mountPath: /config/users_database.yml
        subPath: users.yaml
    
  # Authelia configuration
  configMap:
    theme: auto

    ## Default redirection URL
    ##
    ## If user tries to authenticate without any referer, Authelia does not know where to redirect the user to at the end
    ## of the authentication process. This parameter allows you to specify the default redirection URL Authelia will use
    ## in such a case.
    ##
    ## Note: this parameter is optional. If not provided, user won't be redirected upon successful authentication.
    ## Default is https://www.<domain> (value at the top of the values.yaml).
    # default_redirection_url: https://example.com

    ## Set the default 2FA method for new users and for when a user has a preferred method configured that has been
    ## disabled. This setting must be a method that is enabled.
    ## Options are totp, webauthn, mobile_push.
    default_2fa_method: "webauthn"

    ##
    ## Authentication Backend Provider Configuration
    ##
    ## Used for verifying user passwords and retrieve information such as email address and groups users belong to.
    ##
    ## The available providers are: `file`, `ldap`. You must use one and only one of these providers.
    authentication_backend:

      # In this case Authelia is "stateless" and user data is imported from a config file, so password resets are disabled
      password_reset:
        disable: false
      
      # Disable LDAP backend and use file instead
      ldap:
        enabled: true
      file:
        enabled: false
      
    
    # Identity providers, specifically OIDC
    identity_providers:
      oidc:
        enabled: false
      
    ##
    ## Access Control Configuration
    ##
    ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
    ##
    ## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
    ## to anyone. Otherwise restrictions follow the rules defined.
    ##
    ## Note: One can use the wildcard * to match any subdomain.
    ## It must stand at the beginning of the pattern. (example: *.mydomain.com)
    ##
    ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
    ##
    ## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
    ##
    ## - 'domain' defines which domain or set of domains the rule applies to.
    ##
    ## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
    ##    provided. If provided, the parameter represents either a user or a group. It should be of the form
    ##    'user:<username>' or 'group:<groupname>'.
    ##
    ## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
    ##
    ## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
    ##   is optional and matches any resource if not provided.
    ##
    ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
    access_control:

      # By default require only one factor for now
      default_policy: one_factor
    
    ##
    ## Session Provider Configuration
    ##
    ## The session cookies identify the user once logged in.
    ## The available providers are: `memory`, `redis`. Memory is the provider unless redis is defined.
    session:
      
      # Disable redis session provder and use memory instead
      redis:
        enabled: true
    
    ##
    ## Storage Provider Configuration
    ##
    ## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers.
    storage:

      # Use local storage in ephemeral volume
      local:
        enabled: false
      mysql:
        enabled: false
      postgres:
        enabled: true
    
    ##
    ## Notification Provider
    ##
    ##
    ## Notifications are sent to users when they require a password reset, a u2f registration or a TOTP registration.
    ## The available providers are: filesystem, smtp. You must use one and only one of these providers.
    notifier:
      filesystem:
        enabled: false
      smtp:
        enabled: true

  ##
  ## Authelia Secret Generator.
  ##
  ## If both the values and existingSecret are not defined, this chart randomly generates a new secret on each
  ## install. It is recommended that you use something like sealed-secrets (https://github.com/bitnami-labs/sealed-secrets)
  ## and use the existingSecrets. All secrets can be stored in a single k8s secret if desired using the key option.
  ##
  secret:
    existingSecret: authelia-secrets

  ##
  ## Authelia Persistence Configuration.
  ##
  ## Useful in scenarios where you need persistent storage.
  ## Auth Provider Use Case: file; we recommend you use the ldap provider instead.
  ## Storage Provider Use Case: local; we recommend you use the mysql/mariadb or postgres provider instead.
  ## Configuration Use Case: when you want to manually configure the configuration entirely (set configMap.enabled = false).
  ##
  persistence:
    enabled: false
